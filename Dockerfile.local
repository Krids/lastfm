# =============================================================================
# Builder Stage: Download dependencies and compile application
# =============================================================================
FROM openjdk:11-jdk-slim AS builder

# Install essential build tools
RUN apt-get update && \
    apt-get install -y curl && \
    # Install SBT 1.9.7 (compatible with our build)
    curl -L -o sbt.deb "https://repo.scala-sbt.org/scalasbt/debian/sbt-1.9.7.deb" && \
    dpkg -i sbt.deb || apt-get install -f -y && \
    rm sbt.deb && \
    # Clean up to reduce image size
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy build configuration first (for Docker layer caching)
COPY project/ project/
COPY build.sbt build.sbt

# Pre-download dependencies (this layer will be cached)
RUN sbt update

# Copy source code and compile
COPY src/ src/
RUN sbt compile test:compile

# =============================================================================
# Runtime Stage: JRE with SBT for application execution
# =============================================================================
FROM openjdk:11-jdk-slim AS runtime

# Install SBT and essential tools for runtime
RUN apt-get update && \
    apt-get install -y curl bc procps && \
    # Install SBT (same version as builder)
    curl -L -o sbt.deb "https://repo.scala-sbt.org/scalasbt/debian/sbt-1.9.7.deb" && \
    dpkg -i sbt.deb || apt-get install -f -y && \
    rm sbt.deb && \
    # Clean up to reduce image size
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r lastfm && useradd -r -g lastfm -d /app -s /bin/bash lastfm

# Create app directory and set ownership
WORKDIR /app
RUN chown -R lastfm:lastfm /app

# Set comprehensive temp directory configuration for SBT launcher
ENV JAVA_OPTS="-Xmx8g -XX:+UseG1GC -XX:+UseContainerSupport -XX:G1HeapRegionSize=16m -Djava.io.tmpdir=/app/tmp"
ENV SBT_OPTS="-Dsbt.global.base=/app/.sbt -Dsbt.boot.directory=/app/.sbt/boot -Dsbt.ivy.home=/app/.ivy2 -Djava.io.tmpdir=/app/tmp"
ENV TMPDIR="/app/tmp"
ENV TMP="/app/tmp"
ENV TEMP="/app/tmp"

# Copy compiled application from builder stage
COPY --from=builder /app/target /app/target
COPY --from=builder /app/project /app/project
COPY --from=builder /app/build.sbt /app/build.sbt

# Create data directories and temp directories with proper permissions (BEFORE switching user)
RUN mkdir -p data/input data/output/{bronze,silver,gold,results} logs && \
    mkdir -p /app/tmp /app/.sbt /app/.ivy2 /app/.sbt/boot && \
    chmod -R 755 /app/tmp /app/.sbt /app/.ivy2 && \
    chown -R lastfm:lastfm /app

# Copy and configure entrypoint script
COPY scripts/docker-entrypoint.sh /app/run.sh
RUN chmod +x /app/run.sh && chown lastfm:lastfm /app/run.sh

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ps aux | grep -q "[j]ava.*Main" || exit 1

# Switch to non-root user
USER lastfm

ENTRYPOINT ["/app/run.sh"]
CMD ["complete"]
